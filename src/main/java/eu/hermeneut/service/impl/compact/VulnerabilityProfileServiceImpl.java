/*
 * Copyright 2019 HERMENEUT Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package eu.hermeneut.service.impl.compact;

import eu.hermeneut.domain.CompanyProfile;
import eu.hermeneut.domain.compact.input.VulnerabilityProfile;
import eu.hermeneut.domain.compact.input.VulnerabilityResult;
import eu.hermeneut.domain.result.Result;
import eu.hermeneut.exceptions.NotFoundException;
import eu.hermeneut.service.CompanyProfileService;
import eu.hermeneut.service.compact.VulnerabilityProfileService;
import eu.hermeneut.service.result.ResultService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
public class VulnerabilityProfileServiceImpl implements VulnerabilityProfileService {

    @Autowired
    private CompanyProfileService companyProfileService;

    @Autowired
    private ResultService resultService;

    @Override
    public VulnerabilityProfile getVulnerabilityProfile(Long companyProfileID) throws NotFoundException {
        CompanyProfile companyProfile = this.companyProfileService.findOne(companyProfileID);

        if (companyProfile == null) {
            throw new NotFoundException("Company Profile not found");
        }

        VulnerabilityProfile vulnerabilityProfile = new VulnerabilityProfile();

        vulnerabilityProfile.setCompanyID(companyProfile.getId());
        vulnerabilityProfile.setCompanyName(companyProfile.getName());

        // TODO check the overall likelihood
        Float overallLikelihood = this.resultService.getOverallLikelihood(companyProfileID);
        vulnerabilityProfile.setOverallLikelihood(overallLikelihood);

        // TODO get the vulnerabilities
        VulnerabilityResult result = this.resultService.getVulnerabilityResult(companyProfileID);
        vulnerabilityProfile.setVulnerabilities(result);

        return vulnerabilityProfile;
    }
}
