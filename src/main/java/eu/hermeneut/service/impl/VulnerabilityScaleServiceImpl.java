package eu.hermeneut.service.impl;

import eu.hermeneut.service.VulnerabilityScaleService;
import eu.hermeneut.domain.VulnerabilityScale;
import eu.hermeneut.repository.VulnerabilityScaleRepository;
import eu.hermeneut.repository.search.VulnerabilityScaleSearchRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import static org.elasticsearch.index.query.QueryBuilders.*;

/**
 * Service Implementation for managing VulnerabilityScale.
 */
@Service
@Transactional
public class VulnerabilityScaleServiceImpl implements VulnerabilityScaleService {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityScaleServiceImpl.class);

    private final VulnerabilityScaleRepository vulnerabilityScaleRepository;

    private final VulnerabilityScaleSearchRepository vulnerabilityScaleSearchRepository;

    public VulnerabilityScaleServiceImpl(VulnerabilityScaleRepository vulnerabilityScaleRepository, VulnerabilityScaleSearchRepository vulnerabilityScaleSearchRepository) {
        this.vulnerabilityScaleRepository = vulnerabilityScaleRepository;
        this.vulnerabilityScaleSearchRepository = vulnerabilityScaleSearchRepository;
    }

    /**
     * Save a vulnerabilityScale.
     *
     * @param vulnerabilityScale the entity to save
     * @return the persisted entity
     */
    @Override
    public VulnerabilityScale save(VulnerabilityScale vulnerabilityScale) {
        log.debug("Request to save VulnerabilityScale : {}", vulnerabilityScale);
        VulnerabilityScale result = vulnerabilityScaleRepository.save(vulnerabilityScale);
        vulnerabilityScaleSearchRepository.save(result);
        return result;
    }

    /**
     * Get all the vulnerabilityScales.
     *
     * @return the list of entities
     */
    @Override
    @Transactional(readOnly = true)
    public List<VulnerabilityScale> findAll() {
        log.debug("Request to get all VulnerabilityScales");
        return vulnerabilityScaleRepository.findAll();
    }

    /**
     * Get one vulnerabilityScale by id.
     *
     * @param id the id of the entity
     * @return the entity
     */
    @Override
    @Transactional(readOnly = true)
    public VulnerabilityScale findOne(Long id) {
        log.debug("Request to get VulnerabilityScale : {}", id);
        return vulnerabilityScaleRepository.findOne(id);
    }

    /**
     * Delete the vulnerabilityScale by id.
     *
     * @param id the id of the entity
     */
    @Override
    public void delete(Long id) {
        log.debug("Request to delete VulnerabilityScale : {}", id);
        vulnerabilityScaleRepository.delete(id);
        vulnerabilityScaleSearchRepository.delete(id);
    }

    /**
     * Search for the vulnerabilityScale corresponding to the query.
     *
     * @param query the query of the search
     * @return the list of entities
     */
    @Override
    @Transactional(readOnly = true)
    public List<VulnerabilityScale> search(String query) {
        log.debug("Request to search VulnerabilityScales for query {}", query);
        return StreamSupport
            .stream(vulnerabilityScaleSearchRepository.search(queryStringQuery(query)).spliterator(), false)
            .collect(Collectors.toList());
    }

    @Override
    public List<VulnerabilityScale> findAllBySelfAssessment(Long selfAssessmentID) {
        log.debug("Request to get all VulnerabilityScales by SelfAssessment ID: " + selfAssessmentID);
        return vulnerabilityScaleRepository.findAllBySelfAssessment(selfAssessmentID);
    }
}
