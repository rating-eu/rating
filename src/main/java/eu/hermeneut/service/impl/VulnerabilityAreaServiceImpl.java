package eu.hermeneut.service.impl;

import eu.hermeneut.service.VulnerabilityAreaService;
import eu.hermeneut.domain.VulnerabilityArea;
import eu.hermeneut.repository.VulnerabilityAreaRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Service Implementation for managing VulnerabilityArea.
 */
@Service
@Transactional
public class VulnerabilityAreaServiceImpl implements VulnerabilityAreaService {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityAreaServiceImpl.class);

    private final VulnerabilityAreaRepository vulnerabilityAreaRepository;

    public VulnerabilityAreaServiceImpl(VulnerabilityAreaRepository vulnerabilityAreaRepository) {
        this.vulnerabilityAreaRepository = vulnerabilityAreaRepository;
    }

    /**
     * Save a vulnerabilityArea.
     *
     * @param vulnerabilityArea the entity to save
     * @return the persisted entity
     */
    @Override
    public VulnerabilityArea save(VulnerabilityArea vulnerabilityArea) {
        log.debug("Request to save VulnerabilityArea : {}", vulnerabilityArea);
        return vulnerabilityAreaRepository.save(vulnerabilityArea);
    }

    /**
     * Get all the vulnerabilityAreas.
     *
     * @return the list of entities
     */
    @Override
    @Transactional(readOnly = true)
    public List<VulnerabilityArea> findAll() {
        log.debug("Request to get all VulnerabilityAreas");
        return vulnerabilityAreaRepository.findAll();
    }

    /**
     * Get one vulnerabilityArea by id.
     *
     * @param id the id of the entity
     * @return the entity
     */
    @Override
    @Transactional(readOnly = true)
    public VulnerabilityArea findOne(Long id) {
        log.debug("Request to get VulnerabilityArea : {}", id);
        return vulnerabilityAreaRepository.findOne(id);
    }

    /**
     * Delete the vulnerabilityArea by id.
     *
     * @param id the id of the entity
     */
    @Override
    public void delete(Long id) {
        log.debug("Request to delete VulnerabilityArea : {}", id);
        vulnerabilityAreaRepository.delete(id);
    }
}
