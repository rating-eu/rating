package eu.hermeneut.web.rest;

import com.codahale.metrics.annotation.Timed;
import eu.hermeneut.domain.VulnerabilityArea;
import eu.hermeneut.service.VulnerabilityAreaService;
import eu.hermeneut.web.rest.errors.BadRequestAlertException;
import eu.hermeneut.web.rest.util.HeaderUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing VulnerabilityArea.
 */
@RestController
@RequestMapping("/api")
public class VulnerabilityAreaResource {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityAreaResource.class);

    private static final String ENTITY_NAME = "vulnerabilityArea";

    private final VulnerabilityAreaService vulnerabilityAreaService;

    public VulnerabilityAreaResource(VulnerabilityAreaService vulnerabilityAreaService) {
        this.vulnerabilityAreaService = vulnerabilityAreaService;
    }

    /**
     * POST  /vulnerability-areas : Create a new vulnerabilityArea.
     *
     * @param vulnerabilityArea the vulnerabilityArea to create
     * @return the ResponseEntity with status 201 (Created) and with body the new vulnerabilityArea, or with status 400 (Bad Request) if the vulnerabilityArea has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/vulnerability-areas")
    @Timed
    public ResponseEntity<VulnerabilityArea> createVulnerabilityArea(@Valid @RequestBody VulnerabilityArea vulnerabilityArea) throws URISyntaxException {
        log.debug("REST request to save VulnerabilityArea : {}", vulnerabilityArea);
        if (vulnerabilityArea.getId() != null) {
            throw new BadRequestAlertException("A new vulnerabilityArea cannot already have an ID", ENTITY_NAME, "idexists");
        }
        VulnerabilityArea result = vulnerabilityAreaService.save(vulnerabilityArea);
        return ResponseEntity.created(new URI("/api/vulnerability-areas/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /vulnerability-areas : Updates an existing vulnerabilityArea.
     *
     * @param vulnerabilityArea the vulnerabilityArea to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated vulnerabilityArea,
     * or with status 400 (Bad Request) if the vulnerabilityArea is not valid,
     * or with status 500 (Internal Server Error) if the vulnerabilityArea couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/vulnerability-areas")
    @Timed
    public ResponseEntity<VulnerabilityArea> updateVulnerabilityArea(@Valid @RequestBody VulnerabilityArea vulnerabilityArea) throws URISyntaxException {
        log.debug("REST request to update VulnerabilityArea : {}", vulnerabilityArea);
        if (vulnerabilityArea.getId() == null) {
            return createVulnerabilityArea(vulnerabilityArea);
        }
        VulnerabilityArea result = vulnerabilityAreaService.save(vulnerabilityArea);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, vulnerabilityArea.getId().toString()))
            .body(result);
    }

    /**
     * GET  /vulnerability-areas : get all the vulnerabilityAreas.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of vulnerabilityAreas in body
     */
    @GetMapping("/vulnerability-areas")
    @Timed
    public List<VulnerabilityArea> getAllVulnerabilityAreas() {
        log.debug("REST request to get all VulnerabilityAreas");
        return vulnerabilityAreaService.findAll();
        }

    /**
     * GET  /vulnerability-areas/:id : get the "id" vulnerabilityArea.
     *
     * @param id the id of the vulnerabilityArea to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the vulnerabilityArea, or with status 404 (Not Found)
     */
    @GetMapping("/vulnerability-areas/{id}")
    @Timed
    public ResponseEntity<VulnerabilityArea> getVulnerabilityArea(@PathVariable Long id) {
        log.debug("REST request to get VulnerabilityArea : {}", id);
        VulnerabilityArea vulnerabilityArea = vulnerabilityAreaService.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(vulnerabilityArea));
    }

    /**
     * DELETE  /vulnerability-areas/:id : delete the "id" vulnerabilityArea.
     *
     * @param id the id of the vulnerabilityArea to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/vulnerability-areas/{id}")
    @Timed
    public ResponseEntity<Void> deleteVulnerabilityArea(@PathVariable Long id) {
        log.debug("REST request to delete VulnerabilityArea : {}", id);
        vulnerabilityAreaService.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }
}
