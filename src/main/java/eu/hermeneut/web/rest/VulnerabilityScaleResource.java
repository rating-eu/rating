/*
 * Copyright 2019 HERMENEUT Consortium
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package eu.hermeneut.web.rest;

import com.codahale.metrics.annotation.Timed;
import eu.hermeneut.domain.VulnerabilityScale;
import eu.hermeneut.service.VulnerabilityScaleService;
import eu.hermeneut.web.rest.errors.BadRequestAlertException;
import eu.hermeneut.web.rest.util.HeaderUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.Optional;
import java.util.stream.StreamSupport;

import static org.elasticsearch.index.query.QueryBuilders.*;

/**
 * REST controller for managing VulnerabilityScale.
 */
@RestController
@RequestMapping("/api")
public class VulnerabilityScaleResource {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityScaleResource.class);

    private static final String ENTITY_NAME = "vulnerabilityScale";

    private final VulnerabilityScaleService vulnerabilityScaleService;

    public VulnerabilityScaleResource(VulnerabilityScaleService vulnerabilityScaleService) {
        this.vulnerabilityScaleService = vulnerabilityScaleService;
    }

    /**
     * POST  /vulnerability-scales : Create a new vulnerabilityScale.
     *
     * @param vulnerabilityScale the vulnerabilityScale to create
     * @return the ResponseEntity with status 201 (Created) and with body the new vulnerabilityScale, or with status 400 (Bad Request) if the vulnerabilityScale has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/vulnerability-scales")
    @Timed
    public ResponseEntity<VulnerabilityScale> createVulnerabilityScale(@Valid @RequestBody VulnerabilityScale vulnerabilityScale) throws URISyntaxException {
        log.debug("REST request to save VulnerabilityScale : {}", vulnerabilityScale);
        if (vulnerabilityScale.getId() != null) {
            throw new BadRequestAlertException("A new vulnerabilityScale cannot already have an ID", ENTITY_NAME, "idexists");
        }
        VulnerabilityScale result = vulnerabilityScaleService.save(vulnerabilityScale);
        return ResponseEntity.created(new URI("/api/vulnerability-scales/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /vulnerability-scales : Updates an existing vulnerabilityScale.
     *
     * @param vulnerabilityScale the vulnerabilityScale to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated vulnerabilityScale,
     * or with status 400 (Bad Request) if the vulnerabilityScale is not valid,
     * or with status 500 (Internal Server Error) if the vulnerabilityScale couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/vulnerability-scales")
    @Timed
    public ResponseEntity<VulnerabilityScale> updateVulnerabilityScale(@Valid @RequestBody VulnerabilityScale vulnerabilityScale) throws URISyntaxException {
        log.debug("REST request to update VulnerabilityScale : {}", vulnerabilityScale);
        if (vulnerabilityScale.getId() == null) {
            return createVulnerabilityScale(vulnerabilityScale);
        }
        VulnerabilityScale result = vulnerabilityScaleService.save(vulnerabilityScale);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, vulnerabilityScale.getId().toString()))
            .body(result);
    }

    /**
     * GET  /vulnerability-scales : get all the vulnerabilityScales by SelfAssessment.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of vulnerabilityScales in body
     */
    @GetMapping("/vulnerability-scales/self-assessment/{selfAssessmentID}")
    @Timed
    public List<VulnerabilityScale> getAllVulnerabilityScalesBySelfAssessment(@PathVariable Long selfAssessmentID) {
        log.debug("REST request to get all VulnerabilityScales by SelfAssessment: " + selfAssessmentID);
        return vulnerabilityScaleService.findAllBySelfAssessment(selfAssessmentID);
    }

    /**
     * GET  /vulnerability-scales : get all the vulnerabilityScales.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of vulnerabilityScales in body
     */
    @GetMapping("/vulnerability-scales")
    @Timed
    public List<VulnerabilityScale> getAllVulnerabilityScales() {
        log.debug("REST request to get all VulnerabilityScales");
        return vulnerabilityScaleService.findAll();
    }

    /**
     * GET  /vulnerability-scales/:id : get the "id" vulnerabilityScale.
     *
     * @param id the id of the vulnerabilityScale to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the vulnerabilityScale, or with status 404 (Not Found)
     */
    @GetMapping("/vulnerability-scales/{id}")
    @Timed
    public ResponseEntity<VulnerabilityScale> getVulnerabilityScale(@PathVariable Long id) {
        log.debug("REST request to get VulnerabilityScale : {}", id);
        VulnerabilityScale vulnerabilityScale = vulnerabilityScaleService.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(vulnerabilityScale));
    }

    /**
     * DELETE  /vulnerability-scales/:id : delete the "id" vulnerabilityScale.
     *
     * @param id the id of the vulnerabilityScale to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/vulnerability-scales/{id}")
    @Timed
    public ResponseEntity<Void> deleteVulnerabilityScale(@PathVariable Long id) {
        log.debug("REST request to delete VulnerabilityScale : {}", id);
        vulnerabilityScaleService.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

    /**
     * SEARCH  /_search/vulnerability-scales?query=:query : search for the vulnerabilityScale corresponding
     * to the query.
     *
     * @param query the query of the vulnerabilityScale search
     * @return the result of the search
     */
    @GetMapping("/_search/vulnerability-scales")
    @Timed
    public List<VulnerabilityScale> searchVulnerabilityScales(@RequestParam String query) {
        log.debug("REST request to search VulnerabilityScales for query {}", query);
        return vulnerabilityScaleService.search(query);
    }

}
