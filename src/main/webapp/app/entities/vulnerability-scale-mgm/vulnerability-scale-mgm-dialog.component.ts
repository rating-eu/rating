import { Component, OnInit, OnDestroy } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { JhiEventManager, JhiAlertService } from 'ng-jhipster';

import { VulnerabilityScaleMgm } from './vulnerability-scale-mgm.model';
import { VulnerabilityScaleMgmPopupService } from './vulnerability-scale-mgm-popup.service';
import { VulnerabilityScaleMgmService } from './vulnerability-scale-mgm.service';
import { SelfAssessmentMgm, SelfAssessmentMgmService } from '../self-assessment-mgm';
import {SessionStorageService} from 'ngx-webstorage';
import {PopUpService} from '../../shared/pop-up-services/pop-up.service';

@Component({
    selector: 'jhi-vulnerability-scale-mgm-dialog',
    templateUrl: './vulnerability-scale-mgm-dialog.component.html'
})
export class VulnerabilityScaleMgmDialogComponent implements OnInit {

    vulnerabilityScale: VulnerabilityScaleMgm;
    isSaving: boolean;

    selfassessments: SelfAssessmentMgm[];

    constructor(
        public activeModal: NgbActiveModal,
        private jhiAlertService: JhiAlertService,
        private vulnerabilityScaleService: VulnerabilityScaleMgmService,
        private selfAssessmentService: SelfAssessmentMgmService,
        private eventManager: JhiEventManager
    ) {
    }

    ngOnInit() {
        this.isSaving = false;
        this.selfAssessmentService.query()
            .subscribe((res: HttpResponse<SelfAssessmentMgm[]>) => { this.selfassessments = res.body; }, (res: HttpErrorResponse) => this.onError(res.message));
    }

    clear() {
        this.activeModal.dismiss('cancel');
    }

    save() {
        this.isSaving = true;
        if (this.vulnerabilityScale.id !== undefined) {
            this.subscribeToSaveResponse(
                this.vulnerabilityScaleService.update(this.vulnerabilityScale));
        } else {
            this.subscribeToSaveResponse(
                this.vulnerabilityScaleService.create(this.vulnerabilityScale));
        }
    }

    private subscribeToSaveResponse(result: Observable<HttpResponse<VulnerabilityScaleMgm>>) {
        result.subscribe((res: HttpResponse<VulnerabilityScaleMgm>) =>
            this.onSaveSuccess(res.body), (res: HttpErrorResponse) => this.onSaveError());
    }

    private onSaveSuccess(result: VulnerabilityScaleMgm) {
        this.eventManager.broadcast({ name: 'vulnerabilityScaleListModification', content: 'OK'});
        this.isSaving = false;
        this.activeModal.dismiss(result);
    }

    private onSaveError() {
        this.isSaving = false;
    }

    private onError(error: any) {
        this.jhiAlertService.error(error.message, null, null);
    }

    trackSelfAssessmentById(index: number, item: SelfAssessmentMgm) {
        return item.id;
    }
}

@Component({
    selector: 'jhi-vulnerability-scale-mgm-popup',
    template: ''
})
export class VulnerabilityScaleMgmPopupComponent implements OnInit, OnDestroy {

    routeSub: any;

    constructor(
        private route: ActivatedRoute,
        private vulnerabilityScalePopupService: VulnerabilityScaleMgmPopupService,
        public popUpService: PopUpService
    ) {}

    ngOnInit() {
        if (!this.popUpService.canOpen()) {
            return;
        } else {
            this.routeSub = this.route.params.subscribe((params) => {
                if ( params['id'] ) {
                    this.vulnerabilityScalePopupService
                        .open(VulnerabilityScaleMgmDialogComponent as Component, params['id']);
                } else {
                    this.vulnerabilityScalePopupService
                        .open(VulnerabilityScaleMgmDialogComponent as Component);
                }
            });
        }
    }

    ngOnDestroy() {
        if(this.routeSub){
            this.routeSub.unsubscribe();
        }
    }
}
