import {Component, Input, OnInit} from '@angular/core';
import {QuestionnaireStatusMgm} from "../../entities/questionnaire-status-mgm";
import {MatSelectChange} from "@angular/material";
import * as _ from 'lodash';
import {Status} from "../../entities/enumerations/Status.enum";
import {DataSharingService} from "../../data-sharing/data-sharing.service";
import {JhiDateUtils} from "ng-jhipster";

@Component({
    selector: 'jhi-vulnerability-assessment-selector',
    templateUrl: './vulnerability-assessment-selector.component.html',
    styleUrls: ['vulnerability-assessment-selector.component.css']
})
export class VulnerabilityAssessmentSelectorComponent implements OnInit {

    private _questionnaireStatus: QuestionnaireStatusMgm;

    private _questionnaireStatuses: QuestionnaireStatusMgm[];

    private _emptyQuestionnaireStatuses: QuestionnaireStatusMgm[];

    private _pendingQuestionnaireStatuses: QuestionnaireStatusMgm[];

    private _fullQuestionnaireStatuses: QuestionnaireStatusMgm[];

    public questionnairesCreationDateMap: Map<number /*QStatus.ID*/, Date> = new Map();

    constructor(
        private dataSharingService: DataSharingService,
        private dateUtils: JhiDateUtils
    ) {
    }

    ngOnInit() {
        this._questionnaireStatuses = [];
        this._emptyQuestionnaireStatuses = [];
        this._pendingQuestionnaireStatuses = [];
        this._fullQuestionnaireStatuses = [];
        this.questionnairesCreationDateMap = new Map();
    }

    get questionnaireStatus(): QuestionnaireStatusMgm {
        return this._questionnaireStatus;
    }

    set questionnaireStatus(questionnaireStatus: QuestionnaireStatusMgm) {
        this._questionnaireStatus = questionnaireStatus;
        this.dataSharingService.vulnerabilityAssessment = this._questionnaireStatus;

        console.log("Set QuestionnaireStatus: ");
        console.log(this._questionnaireStatus);
    }

    @Input()
    set questionnaireStatuses(questionnaireStatuses: QuestionnaireStatusMgm[]) {
        if (questionnaireStatuses && questionnaireStatuses.length) {
            this._questionnaireStatuses = questionnaireStatuses;

            const self = this;

            this._questionnaireStatuses = _.sortBy(this._questionnaireStatuses, function (assessment: QuestionnaireStatusMgm) {
                return self.dateUtils.convertDateTimeFromServer(assessment.created);
            });

            this._questionnaireStatuses.forEach((value: QuestionnaireStatusMgm) => {
                this.questionnairesCreationDateMap.set(value.id, self.dateUtils.convertDateTimeFromServer(value.created));
            });

            this.questionnaireStatus = this._questionnaireStatuses[0];
            this.questionnaireStatusChange(this.questionnaireStatus);
        } else {
            this._questionnaireStatuses = [];
        }

        this._questionnaireStatuses = questionnaireStatuses;
        this._fullQuestionnaireStatuses = _.filter(this._questionnaireStatuses,
            (questionnaireStatus: QuestionnaireStatusMgm) => questionnaireStatus.status === Status.FULL);

        this._pendingQuestionnaireStatuses = _.filter(this._questionnaireStatuses,
            (questionnaireStatus: QuestionnaireStatusMgm) => questionnaireStatus.status === Status.PENDING);

        this._emptyQuestionnaireStatuses = _.filter(this._questionnaireStatuses,
            (questionnaireStatus: QuestionnaireStatusMgm) => questionnaireStatus.status === Status.EMPTY);
    }

    get questionnaireStatuses(): QuestionnaireStatusMgm[] {
        return this._questionnaireStatuses;
    }

    get emptyQuestionnaireStatuses(): QuestionnaireStatusMgm[] {
        return this._emptyQuestionnaireStatuses;
    }

    get pendingQuestionnaireStatuses(): QuestionnaireStatusMgm[] {
        return this._pendingQuestionnaireStatuses;
    }

    get fullQuestionnaireStatuses(): QuestionnaireStatusMgm[] {
        return this._fullQuestionnaireStatuses;
    }

    questionnaireStatusMatSelectChange(change: MatSelectChange) {
        console.log("Questionnaire Status selection changed...");
        console.log(change);
        console.log(change.value);

        const vulnerabilityAssessment: QuestionnaireStatusMgm = change.value;
        this.dataSharingService.vulnerabilityAssessment = vulnerabilityAssessment;

        this.questionnaireStatusChange(vulnerabilityAssessment);
    }

    private questionnaireStatusChange(questionnaireStatus: QuestionnaireStatusMgm) {
        this.dataSharingService.vulnerabilityAssessment = questionnaireStatus;
    }
}
