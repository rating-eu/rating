import {ChangeDetectorRef, Component, OnDestroy, OnInit, ViewRef} from '@angular/core';
import {ChartDataSets, ChartType, RadialChartOptions} from 'chart.js';
import {DataSharingService} from '../../data-sharing/data-sharing.service';
import {Subscription} from 'rxjs';
import {QuestionnaireStatusMgm} from '../../entities/questionnaire-status-mgm';
import {VulnerabilityAreaMgm, VulnerabilityAreaMgmService} from '../../entities/vulnerability-area-mgm';
import {HttpResponse} from '@angular/common/http';
import {MatSlideToggleChange} from "@angular/material";
import {VulnerabilityRadarService} from "./vulnerability-radar.service";
import {ContainerType} from "../../entities/enumerations/ContainerType.enum";

@Component({
    selector: 'jhi-vulnerability-radar-widget',
    templateUrl: './vulnerability-radar-widget.component.html',
    styles: []
})
export class VulnerabilityRadarWidgetComponent implements OnInit, OnDestroy {

    private subscriptions: Subscription[];
    public isCollapsed = true;
    public vulnerabilityAssessment: QuestionnaireStatusMgm;
    public vulnerabilityAreas: VulnerabilityAreaMgm[];
    public vulnerabilityAreasMap: Map<number, VulnerabilityAreaMgm>;
    public vulnerabilityAreasToggleMap: Map<number/*AreaID*/, boolean>;

    public containerTypes: ContainerType[];
    public containerTypeEnum = ContainerType;

    // Chart
    public radarChartLabels: String[] = ['Human', 'IT', 'Physical'];
    public radarChartType: ChartType = 'radar';

    // Data
    public data: Map<number/*AreaID*/, Map<ContainerType, number/*Vulnerability*/>>;
    private dataSetByAreaMap: Map<number/*AreaID*/, ChartDataSets>;

    public radarChartDataSets: ChartDataSets[];

    constructor(
        private dataSharingService: DataSharingService,
        private vulnerabilityAreaService: VulnerabilityAreaMgmService,
        private vulnerabilityRadarService: VulnerabilityRadarService,
        private changeDetector: ChangeDetectorRef) {
    }

    ngOnInit() {
        this.subscriptions = [];
        this.vulnerabilityAreas = [];
        this.vulnerabilityAreasMap = new Map();
        this.vulnerabilityAreasToggleMap = new Map();
        this.dataSetByAreaMap = new Map();
        this.radarChartDataSets = [];

        this.containerTypes = Object.keys(ContainerType).map((key) => ContainerType[key]);
        // Remove the last one (Intangible)
        this.containerTypes = this.containerTypes.slice(0, this.containerTypes.length - 1);

        this.vulnerabilityAssessment = this.dataSharingService.vulnerabilityAssessment;
        this.fetchDataSet();

        this.subscriptions.push(
            this.dataSharingService.vulnerabilityAssessment$.subscribe(
                (assessment: QuestionnaireStatusMgm) => {
                    this.vulnerabilityAssessment = assessment;
                    this.fetchDataSet();
                }
            )
        );

        this.vulnerabilityAreaService.query().toPromise().then((response: HttpResponse<VulnerabilityAreaMgm[]>) => {

            if (response.body) {
                this.vulnerabilityAreas = response.body;

                this.vulnerabilityAreas.forEach((area: VulnerabilityAreaMgm) => {
                    this.vulnerabilityAreasMap.set(area.id, area);
                    this.vulnerabilityAreasToggleMap.set(area.id, true);
                });

                if (this.changeDetector && !(this.changeDetector as ViewRef).destroyed) {
                    this.changeDetector.detectChanges();
                }
            }
        });
    }

    private buildDataSet() {
        // Build the DataSets
        if (this.data) {
            this.data.forEach((value: Map<ContainerType, number/*Vulnerability*/>, key: number /*AreaID*/) => {
                const human: number = value.get(ContainerType.HUMAN);
                const it: number = value.get(ContainerType.IT);
                const physical: number = value.get(ContainerType.PHYSICAL);

                const area: VulnerabilityAreaMgm = this.vulnerabilityAreasMap.get(key);

                if (area) {
                    this.dataSetByAreaMap.set(key, {data: [human, it, physical], label: area.name});
                    this.radarChartDataSets.push(this.dataSetByAreaMap.get(area.id));
                }
            });
        }
    }

    private fetchDataSet() {
        if (this.vulnerabilityAssessment) {
            this.vulnerabilityRadarService.getVulnerabilityRadar(this.vulnerabilityAssessment.id)
                .toPromise()
                .then((response: HttpResponse<Map<number, Map<ContainerType, number>>>) => {
                    this.data = response.body;

                    /*this.data = new Map();

                    Object.keys(response.body)
                        .forEach((key: string) => {
                            const innerObj = response.body[key];
                            const innerDataMap: Map<ContainerType, number> = new Map();

                            // Populate the innerData map
                            // loop the obj...
                            Object.keys(innerObj)
                                .forEach((key: string) => {
                                    const cType: ContainerType = ContainerType[key];

                                    innerDataMap.set(cType, innerObj[key]);
                                });


                            this.data.set(Number(key), innerDataMap);
                        });*/

                    this.buildDataSet();
                });
        }
    }

    // Radar
    public radarChartOptions: RadialChartOptions = {
        legend: {
            position: "bottom"
        },
        responsive: true,
        scale: {
            ticks: {
                beginAtZero: false,
                min: 1,
                max: 5
            }
        }
    };

    public toggleChange(area: VulnerabilityAreaMgm, change: MatSlideToggleChange) {
        this.vulnerabilityAreasToggleMap.set(area.id, change.checked);

        // Update the DataSet
        this.radarChartDataSets = [];

        if (this.changeDetector && !(this.changeDetector as ViewRef).destroyed) {
            this.changeDetector.detectChanges();
        }

        this.dataSetByAreaMap.forEach((value: ChartDataSets, key: number /*AreaID*/) => {
            if (this.vulnerabilityAreasToggleMap.get(key)) {
                this.radarChartDataSets.push(value);
            }
        });

        if (this.changeDetector && !(this.changeDetector as ViewRef).destroyed) {
            this.changeDetector.detectChanges();
        }
    }

    ngOnDestroy(): void {
        this.changeDetector.detach();

        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((subscription: Subscription) => {
                if (subscription) {
                    subscription.unsubscribe();
                }
            });
        }
    }
}
