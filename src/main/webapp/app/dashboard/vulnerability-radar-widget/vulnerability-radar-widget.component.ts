import {Component, OnDestroy, OnInit} from '@angular/core';
import {ChartDataSets, ChartType, RadialChartOptions} from 'chart.js';
import {DataSharingService} from '../../data-sharing/data-sharing.service';
import {Subscription} from "rxjs";
import {QuestionnaireStatusMgm} from "../../entities/questionnaire-status-mgm";
import {VulnerabilityAreaMgm, VulnerabilityAreaMgmService} from "../../entities/vulnerability-area-mgm";
import {HttpResponse} from "@angular/common/http";


@Component({
    selector: 'jhi-vulnerability-radar-widget',
    templateUrl: './vulnerability-radar-widget.component.html',
    styles: []
})
export class VulnerabilityRadarWidgetComponent implements OnInit, OnDestroy {

    private subscriptions: Subscription[];
    public isCollapsed = true;
    public vulnerabilityAssessment: QuestionnaireStatusMgm;
    public vulnerabilityAreas: VulnerabilityAreaMgm[];
    public vulnerabilityAreasToggleMap: Map<number, boolean>;

    constructor(
        private dataSharingService: DataSharingService,
        private vulnerabilityAreaService: VulnerabilityAreaMgmService) {
    }

    ngOnInit() {
        this.subscriptions = [];
        this.vulnerabilityAreas = [];
        this.vulnerabilityAreasToggleMap = new Map();

        this.vulnerabilityAssessment = this.dataSharingService.vulnerabilityAssessment;

        this.subscriptions.push(
            this.dataSharingService.vulnerabilityAssessment$.subscribe(
                (assessment: QuestionnaireStatusMgm) => {
                    this.vulnerabilityAssessment = assessment;
                }
            )
        );

        this.vulnerabilityAreaService.query().toPromise().then((response: HttpResponse<VulnerabilityAreaMgm[]>) => {

            if (response.body) {
                this.vulnerabilityAreas = response.body;

                this.vulnerabilityAreas.forEach((area: VulnerabilityAreaMgm) => {
                    this.vulnerabilityAreasToggleMap.set(area.id, true);
                });
            }
        });
    }

    // Radar
    public radarChartOptions: RadialChartOptions = {
        responsive: true,
    };
    public radarChartLabels: String[] = ['Human', 'IT', 'Physical'];

    public radarChartData: ChartDataSets[] = [
        {data: [55, 39, 60], label: 'Initial Vulnerability'},
        {data: [65, 59, 65], label: 'Contextual Vulnerability'},
        {data: [48, 65, 70], label: 'Refined Vulnerability'}
    ];

    public radarChartType: ChartType = 'radar';

    ngOnDestroy(): void {
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((subscription: Subscription) => {
                if (subscription) {
                    subscription.unsubscribe();
                }
            });
        }
    }
}
