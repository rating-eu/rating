import {Injectable} from '@angular/core';
import {HttpClient, HttpResponse} from "@angular/common/http";
import {SERVER_API_URL} from "../../app.constants";
import {ContainerType} from "../../entities/enumerations/ContainerType.enum";
import {VulnerabilityAreaMgm} from "../../entities/vulnerability-area-mgm";
import {Observable} from "rxjs";
import {DirectAssetMgm, EntityResponseType} from "../../entities/direct-asset-mgm";

const QUESTIONNAIRE_STATUS_PLACEHOLDER = '{QUESTIONNAIRE_STATUS_ID}';

@Injectable()
export class VulnerabilityRadarService {

    private vulnerabilityRadarAPIUrl = SERVER_API_URL + 'api/chart/radar/vulnerability/' + QUESTIONNAIRE_STATUS_PLACEHOLDER;


    constructor(private http: HttpClient) {
    }

    public getVulnerabilityRadar(questionnaireStatusID: number): Observable<HttpResponse<Map<number, Map<ContainerType, number>>>> {
        return this.http.get<Map<number, Map<ContainerType, number>>>(
            this.vulnerabilityRadarAPIUrl
                .replace(QUESTIONNAIRE_STATUS_PLACEHOLDER, String(questionnaireStatusID)), {observe: 'response'})
            .map((response: HttpResponse<Map<number, Map<ContainerType, number>>>) => this.convertResponse(response));
    }

    public convertResponse(response: HttpResponse<Map<number, Map<ContainerType, number>>>){
        const body: Map<number, Map<ContainerType, number>> = this.convertItemFromServer(response.body);
        return response.clone({body});
    }

    private convertItemFromServer(vulnerabilitiesMap: Map<number, Map<ContainerType, number>>): Map<number, Map<ContainerType, number>> {
        const obj = vulnerabilitiesMap;
        const data: Map<number, Map<ContainerType, number>> = new Map();

        Object.keys(obj)
            .forEach((key: string) => {
                const innerObj = obj[key];
                const innerDataMap: Map<ContainerType, number> = new Map();

                // Populate the innerData map
                // loop the obj...
                Object.keys(innerObj)
                    .forEach((key: string) => {
                        const cType: ContainerType = ContainerType[key];

                        innerDataMap.set(cType, innerObj[key]);
                    });

                data.set(Number(key), innerDataMap);
            });

        return data;
    }
}
