package eu.hermeneut.web.rest;

import eu.hermeneut.HermeneutApp;

import eu.hermeneut.domain.VulnerabilityScale;
import eu.hermeneut.repository.VulnerabilityScaleRepository;
import eu.hermeneut.service.VulnerabilityScaleService;
import eu.hermeneut.repository.search.VulnerabilityScaleSearchRepository;
import eu.hermeneut.web.rest.errors.ExceptionTranslator;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.util.List;

import static eu.hermeneut.web.rest.TestUtil.createFormattingConversionService;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the VulnerabilityScaleResource REST controller.
 *
 * @see VulnerabilityScaleResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = HermeneutApp.class)
public class VulnerabilityScaleResourceIntTest {

    private static final String DEFAULT_NAME = "AAAAAAAAAA";
    private static final String UPDATED_NAME = "BBBBBBBBBB";

    private static final String DEFAULT_DESCRIPTION = "AAAAAAAAAA";
    private static final String UPDATED_DESCRIPTION = "BBBBBBBBBB";

    private static final Integer DEFAULT_VULNERABILITY = 1;
    private static final Integer UPDATED_VULNERABILITY = 2;

    @Autowired
    private VulnerabilityScaleRepository vulnerabilityScaleRepository;

    @Autowired
    private VulnerabilityScaleService vulnerabilityScaleService;

    @Autowired
    private VulnerabilityScaleSearchRepository vulnerabilityScaleSearchRepository;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restVulnerabilityScaleMockMvc;

    private VulnerabilityScale vulnerabilityScale;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        final VulnerabilityScaleResource vulnerabilityScaleResource = new VulnerabilityScaleResource(vulnerabilityScaleService);
        this.restVulnerabilityScaleMockMvc = MockMvcBuilders.standaloneSetup(vulnerabilityScaleResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setConversionService(createFormattingConversionService())
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static VulnerabilityScale createEntity(EntityManager em) {
        VulnerabilityScale vulnerabilityScale = new VulnerabilityScale()
            .name(DEFAULT_NAME)
            .description(DEFAULT_DESCRIPTION)
            .vulnerability(DEFAULT_VULNERABILITY);
        return vulnerabilityScale;
    }

    @Before
    public void initTest() {
        vulnerabilityScaleSearchRepository.deleteAll();
        vulnerabilityScale = createEntity(em);
    }

    @Test
    @Transactional
    public void createVulnerabilityScale() throws Exception {
        int databaseSizeBeforeCreate = vulnerabilityScaleRepository.findAll().size();

        // Create the VulnerabilityScale
        restVulnerabilityScaleMockMvc.perform(post("/api/vulnerability-scales")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityScale)))
            .andExpect(status().isCreated());

        // Validate the VulnerabilityScale in the database
        List<VulnerabilityScale> vulnerabilityScaleList = vulnerabilityScaleRepository.findAll();
        assertThat(vulnerabilityScaleList).hasSize(databaseSizeBeforeCreate + 1);
        VulnerabilityScale testVulnerabilityScale = vulnerabilityScaleList.get(vulnerabilityScaleList.size() - 1);
        assertThat(testVulnerabilityScale.getName()).isEqualTo(DEFAULT_NAME);
        assertThat(testVulnerabilityScale.getDescription()).isEqualTo(DEFAULT_DESCRIPTION);
        assertThat(testVulnerabilityScale.getVulnerability()).isEqualTo(DEFAULT_VULNERABILITY);

        // Validate the VulnerabilityScale in Elasticsearch
        VulnerabilityScale vulnerabilityScaleEs = vulnerabilityScaleSearchRepository.findOne(testVulnerabilityScale.getId());
        assertThat(vulnerabilityScaleEs).isEqualToIgnoringGivenFields(testVulnerabilityScale);
    }

    @Test
    @Transactional
    public void createVulnerabilityScaleWithExistingId() throws Exception {
        int databaseSizeBeforeCreate = vulnerabilityScaleRepository.findAll().size();

        // Create the VulnerabilityScale with an existing ID
        vulnerabilityScale.setId(1L);

        // An entity with an existing ID cannot be created, so this API call must fail
        restVulnerabilityScaleMockMvc.perform(post("/api/vulnerability-scales")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityScale)))
            .andExpect(status().isBadRequest());

        // Validate the VulnerabilityScale in the database
        List<VulnerabilityScale> vulnerabilityScaleList = vulnerabilityScaleRepository.findAll();
        assertThat(vulnerabilityScaleList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    public void checkNameIsRequired() throws Exception {
        int databaseSizeBeforeTest = vulnerabilityScaleRepository.findAll().size();
        // set the field null
        vulnerabilityScale.setName(null);

        // Create the VulnerabilityScale, which fails.

        restVulnerabilityScaleMockMvc.perform(post("/api/vulnerability-scales")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityScale)))
            .andExpect(status().isBadRequest());

        List<VulnerabilityScale> vulnerabilityScaleList = vulnerabilityScaleRepository.findAll();
        assertThat(vulnerabilityScaleList).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    public void checkDescriptionIsRequired() throws Exception {
        int databaseSizeBeforeTest = vulnerabilityScaleRepository.findAll().size();
        // set the field null
        vulnerabilityScale.setDescription(null);

        // Create the VulnerabilityScale, which fails.

        restVulnerabilityScaleMockMvc.perform(post("/api/vulnerability-scales")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityScale)))
            .andExpect(status().isBadRequest());

        List<VulnerabilityScale> vulnerabilityScaleList = vulnerabilityScaleRepository.findAll();
        assertThat(vulnerabilityScaleList).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    public void checkVulnerabilityIsRequired() throws Exception {
        int databaseSizeBeforeTest = vulnerabilityScaleRepository.findAll().size();
        // set the field null
        vulnerabilityScale.setVulnerability(null);

        // Create the VulnerabilityScale, which fails.

        restVulnerabilityScaleMockMvc.perform(post("/api/vulnerability-scales")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityScale)))
            .andExpect(status().isBadRequest());

        List<VulnerabilityScale> vulnerabilityScaleList = vulnerabilityScaleRepository.findAll();
        assertThat(vulnerabilityScaleList).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    public void getAllVulnerabilityScales() throws Exception {
        // Initialize the database
        vulnerabilityScaleRepository.saveAndFlush(vulnerabilityScale);

        // Get all the vulnerabilityScaleList
        restVulnerabilityScaleMockMvc.perform(get("/api/vulnerability-scales?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(vulnerabilityScale.getId().intValue())))
            .andExpect(jsonPath("$.[*].name").value(hasItem(DEFAULT_NAME.toString())))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION.toString())))
            .andExpect(jsonPath("$.[*].vulnerability").value(hasItem(DEFAULT_VULNERABILITY)));
    }

    @Test
    @Transactional
    public void getVulnerabilityScale() throws Exception {
        // Initialize the database
        vulnerabilityScaleRepository.saveAndFlush(vulnerabilityScale);

        // Get the vulnerabilityScale
        restVulnerabilityScaleMockMvc.perform(get("/api/vulnerability-scales/{id}", vulnerabilityScale.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.id").value(vulnerabilityScale.getId().intValue()))
            .andExpect(jsonPath("$.name").value(DEFAULT_NAME.toString()))
            .andExpect(jsonPath("$.description").value(DEFAULT_DESCRIPTION.toString()))
            .andExpect(jsonPath("$.vulnerability").value(DEFAULT_VULNERABILITY));
    }

    @Test
    @Transactional
    public void getNonExistingVulnerabilityScale() throws Exception {
        // Get the vulnerabilityScale
        restVulnerabilityScaleMockMvc.perform(get("/api/vulnerability-scales/{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateVulnerabilityScale() throws Exception {
        // Initialize the database
        vulnerabilityScaleService.save(vulnerabilityScale);

        int databaseSizeBeforeUpdate = vulnerabilityScaleRepository.findAll().size();

        // Update the vulnerabilityScale
        VulnerabilityScale updatedVulnerabilityScale = vulnerabilityScaleRepository.findOne(vulnerabilityScale.getId());
        // Disconnect from session so that the updates on updatedVulnerabilityScale are not directly saved in db
        em.detach(updatedVulnerabilityScale);
        updatedVulnerabilityScale
            .name(UPDATED_NAME)
            .description(UPDATED_DESCRIPTION)
            .vulnerability(UPDATED_VULNERABILITY);

        restVulnerabilityScaleMockMvc.perform(put("/api/vulnerability-scales")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(updatedVulnerabilityScale)))
            .andExpect(status().isOk());

        // Validate the VulnerabilityScale in the database
        List<VulnerabilityScale> vulnerabilityScaleList = vulnerabilityScaleRepository.findAll();
        assertThat(vulnerabilityScaleList).hasSize(databaseSizeBeforeUpdate);
        VulnerabilityScale testVulnerabilityScale = vulnerabilityScaleList.get(vulnerabilityScaleList.size() - 1);
        assertThat(testVulnerabilityScale.getName()).isEqualTo(UPDATED_NAME);
        assertThat(testVulnerabilityScale.getDescription()).isEqualTo(UPDATED_DESCRIPTION);
        assertThat(testVulnerabilityScale.getVulnerability()).isEqualTo(UPDATED_VULNERABILITY);

        // Validate the VulnerabilityScale in Elasticsearch
        VulnerabilityScale vulnerabilityScaleEs = vulnerabilityScaleSearchRepository.findOne(testVulnerabilityScale.getId());
        assertThat(vulnerabilityScaleEs).isEqualToIgnoringGivenFields(testVulnerabilityScale);
    }

    @Test
    @Transactional
    public void updateNonExistingVulnerabilityScale() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityScaleRepository.findAll().size();

        // Create the VulnerabilityScale

        // If the entity doesn't have an ID, it will be created instead of just being updated
        restVulnerabilityScaleMockMvc.perform(put("/api/vulnerability-scales")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityScale)))
            .andExpect(status().isCreated());

        // Validate the VulnerabilityScale in the database
        List<VulnerabilityScale> vulnerabilityScaleList = vulnerabilityScaleRepository.findAll();
        assertThat(vulnerabilityScaleList).hasSize(databaseSizeBeforeUpdate + 1);
    }

    @Test
    @Transactional
    public void deleteVulnerabilityScale() throws Exception {
        // Initialize the database
        vulnerabilityScaleService.save(vulnerabilityScale);

        int databaseSizeBeforeDelete = vulnerabilityScaleRepository.findAll().size();

        // Get the vulnerabilityScale
        restVulnerabilityScaleMockMvc.perform(delete("/api/vulnerability-scales/{id}", vulnerabilityScale.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate Elasticsearch is empty
        boolean vulnerabilityScaleExistsInEs = vulnerabilityScaleSearchRepository.exists(vulnerabilityScale.getId());
        assertThat(vulnerabilityScaleExistsInEs).isFalse();

        // Validate the database is empty
        List<VulnerabilityScale> vulnerabilityScaleList = vulnerabilityScaleRepository.findAll();
        assertThat(vulnerabilityScaleList).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void searchVulnerabilityScale() throws Exception {
        // Initialize the database
        vulnerabilityScaleService.save(vulnerabilityScale);

        // Search the vulnerabilityScale
        restVulnerabilityScaleMockMvc.perform(get("/api/_search/vulnerability-scales?query=id:" + vulnerabilityScale.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(vulnerabilityScale.getId().intValue())))
            .andExpect(jsonPath("$.[*].name").value(hasItem(DEFAULT_NAME.toString())))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION.toString())))
            .andExpect(jsonPath("$.[*].vulnerability").value(hasItem(DEFAULT_VULNERABILITY)));
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(VulnerabilityScale.class);
        VulnerabilityScale vulnerabilityScale1 = new VulnerabilityScale();
        vulnerabilityScale1.setId(1L);
        VulnerabilityScale vulnerabilityScale2 = new VulnerabilityScale();
        vulnerabilityScale2.setId(vulnerabilityScale1.getId());
        assertThat(vulnerabilityScale1).isEqualTo(vulnerabilityScale2);
        vulnerabilityScale2.setId(2L);
        assertThat(vulnerabilityScale1).isNotEqualTo(vulnerabilityScale2);
        vulnerabilityScale1.setId(null);
        assertThat(vulnerabilityScale1).isNotEqualTo(vulnerabilityScale2);
    }
}
