package eu.hermeneut.web.rest;

import eu.hermeneut.HermeneutApp;

import eu.hermeneut.domain.VulnerabilityArea;
import eu.hermeneut.repository.VulnerabilityAreaRepository;
import eu.hermeneut.service.VulnerabilityAreaService;
import eu.hermeneut.web.rest.errors.ExceptionTranslator;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.util.List;

import static eu.hermeneut.web.rest.TestUtil.createFormattingConversionService;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the VulnerabilityAreaResource REST controller.
 *
 * @see VulnerabilityAreaResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = HermeneutApp.class)
public class VulnerabilityAreaResourceIntTest {

    private static final String DEFAULT_NAME = "AAAAAAAAAA";
    private static final String UPDATED_NAME = "BBBBBBBBBB";

    @Autowired
    private VulnerabilityAreaRepository vulnerabilityAreaRepository;

    @Autowired
    private VulnerabilityAreaService vulnerabilityAreaService;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restVulnerabilityAreaMockMvc;

    private VulnerabilityArea vulnerabilityArea;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        final VulnerabilityAreaResource vulnerabilityAreaResource = new VulnerabilityAreaResource(vulnerabilityAreaService);
        this.restVulnerabilityAreaMockMvc = MockMvcBuilders.standaloneSetup(vulnerabilityAreaResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setConversionService(createFormattingConversionService())
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static VulnerabilityArea createEntity(EntityManager em) {
        VulnerabilityArea vulnerabilityArea = new VulnerabilityArea()
            .name(DEFAULT_NAME);
        return vulnerabilityArea;
    }

    @Before
    public void initTest() {
        vulnerabilityArea = createEntity(em);
    }

    @Test
    @Transactional
    public void createVulnerabilityArea() throws Exception {
        int databaseSizeBeforeCreate = vulnerabilityAreaRepository.findAll().size();

        // Create the VulnerabilityArea
        restVulnerabilityAreaMockMvc.perform(post("/api/vulnerability-areas")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityArea)))
            .andExpect(status().isCreated());

        // Validate the VulnerabilityArea in the database
        List<VulnerabilityArea> vulnerabilityAreaList = vulnerabilityAreaRepository.findAll();
        assertThat(vulnerabilityAreaList).hasSize(databaseSizeBeforeCreate + 1);
        VulnerabilityArea testVulnerabilityArea = vulnerabilityAreaList.get(vulnerabilityAreaList.size() - 1);
        assertThat(testVulnerabilityArea.getName()).isEqualTo(DEFAULT_NAME);
    }

    @Test
    @Transactional
    public void createVulnerabilityAreaWithExistingId() throws Exception {
        int databaseSizeBeforeCreate = vulnerabilityAreaRepository.findAll().size();

        // Create the VulnerabilityArea with an existing ID
        vulnerabilityArea.setId(1L);

        // An entity with an existing ID cannot be created, so this API call must fail
        restVulnerabilityAreaMockMvc.perform(post("/api/vulnerability-areas")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityArea)))
            .andExpect(status().isBadRequest());

        // Validate the VulnerabilityArea in the database
        List<VulnerabilityArea> vulnerabilityAreaList = vulnerabilityAreaRepository.findAll();
        assertThat(vulnerabilityAreaList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    public void checkNameIsRequired() throws Exception {
        int databaseSizeBeforeTest = vulnerabilityAreaRepository.findAll().size();
        // set the field null
        vulnerabilityArea.setName(null);

        // Create the VulnerabilityArea, which fails.

        restVulnerabilityAreaMockMvc.perform(post("/api/vulnerability-areas")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityArea)))
            .andExpect(status().isBadRequest());

        List<VulnerabilityArea> vulnerabilityAreaList = vulnerabilityAreaRepository.findAll();
        assertThat(vulnerabilityAreaList).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    public void getAllVulnerabilityAreas() throws Exception {
        // Initialize the database
        vulnerabilityAreaRepository.saveAndFlush(vulnerabilityArea);

        // Get all the vulnerabilityAreaList
        restVulnerabilityAreaMockMvc.perform(get("/api/vulnerability-areas?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(vulnerabilityArea.getId().intValue())))
            .andExpect(jsonPath("$.[*].name").value(hasItem(DEFAULT_NAME.toString())));
    }

    @Test
    @Transactional
    public void getVulnerabilityArea() throws Exception {
        // Initialize the database
        vulnerabilityAreaRepository.saveAndFlush(vulnerabilityArea);

        // Get the vulnerabilityArea
        restVulnerabilityAreaMockMvc.perform(get("/api/vulnerability-areas/{id}", vulnerabilityArea.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.id").value(vulnerabilityArea.getId().intValue()))
            .andExpect(jsonPath("$.name").value(DEFAULT_NAME.toString()));
    }

    @Test
    @Transactional
    public void getNonExistingVulnerabilityArea() throws Exception {
        // Get the vulnerabilityArea
        restVulnerabilityAreaMockMvc.perform(get("/api/vulnerability-areas/{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateVulnerabilityArea() throws Exception {
        // Initialize the database
        vulnerabilityAreaService.save(vulnerabilityArea);

        int databaseSizeBeforeUpdate = vulnerabilityAreaRepository.findAll().size();

        // Update the vulnerabilityArea
        VulnerabilityArea updatedVulnerabilityArea = vulnerabilityAreaRepository.findOne(vulnerabilityArea.getId());
        // Disconnect from session so that the updates on updatedVulnerabilityArea are not directly saved in db
        em.detach(updatedVulnerabilityArea);
        updatedVulnerabilityArea
            .name(UPDATED_NAME);

        restVulnerabilityAreaMockMvc.perform(put("/api/vulnerability-areas")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(updatedVulnerabilityArea)))
            .andExpect(status().isOk());

        // Validate the VulnerabilityArea in the database
        List<VulnerabilityArea> vulnerabilityAreaList = vulnerabilityAreaRepository.findAll();
        assertThat(vulnerabilityAreaList).hasSize(databaseSizeBeforeUpdate);
        VulnerabilityArea testVulnerabilityArea = vulnerabilityAreaList.get(vulnerabilityAreaList.size() - 1);
        assertThat(testVulnerabilityArea.getName()).isEqualTo(UPDATED_NAME);
    }

    @Test
    @Transactional
    public void updateNonExistingVulnerabilityArea() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityAreaRepository.findAll().size();

        // Create the VulnerabilityArea

        // If the entity doesn't have an ID, it will be created instead of just being updated
        restVulnerabilityAreaMockMvc.perform(put("/api/vulnerability-areas")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(vulnerabilityArea)))
            .andExpect(status().isCreated());

        // Validate the VulnerabilityArea in the database
        List<VulnerabilityArea> vulnerabilityAreaList = vulnerabilityAreaRepository.findAll();
        assertThat(vulnerabilityAreaList).hasSize(databaseSizeBeforeUpdate + 1);
    }

    @Test
    @Transactional
    public void deleteVulnerabilityArea() throws Exception {
        // Initialize the database
        vulnerabilityAreaService.save(vulnerabilityArea);

        int databaseSizeBeforeDelete = vulnerabilityAreaRepository.findAll().size();

        // Get the vulnerabilityArea
        restVulnerabilityAreaMockMvc.perform(delete("/api/vulnerability-areas/{id}", vulnerabilityArea.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate the database is empty
        List<VulnerabilityArea> vulnerabilityAreaList = vulnerabilityAreaRepository.findAll();
        assertThat(vulnerabilityAreaList).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(VulnerabilityArea.class);
        VulnerabilityArea vulnerabilityArea1 = new VulnerabilityArea();
        vulnerabilityArea1.setId(1L);
        VulnerabilityArea vulnerabilityArea2 = new VulnerabilityArea();
        vulnerabilityArea2.setId(vulnerabilityArea1.getId());
        assertThat(vulnerabilityArea1).isEqualTo(vulnerabilityArea2);
        vulnerabilityArea2.setId(2L);
        assertThat(vulnerabilityArea1).isNotEqualTo(vulnerabilityArea2);
        vulnerabilityArea1.setId(null);
        assertThat(vulnerabilityArea1).isNotEqualTo(vulnerabilityArea2);
    }
}
